"""init DB scheme

Revision ID: ea47001a9ade
Revises: 
Create Date: 2023-10-20 16:08:17.329175

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'ea47001a9ade'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('sub_archive',
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('finished_at', sa.DateTime(), nullable=True),
    sa.Column('request_count', sa.Integer(), nullable=True),
    schema='gpt'
    )
    op.create_table('sub_info',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('activity_status', sa.Integer(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=False),
    sa.Column('expired_at', sa.DateTime(), nullable=True),
    sa.Column('request_count', sa.Integer(), nullable=True),
    sa.Column('tokens', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('user_id'),
    schema='gpt'
    )
    op.create_table('users',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('language', sa.String(), nullable=True),
    sa.Column('temperature', sa.Float(), nullable=True),
    sa.Column('registered_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('user_id'),
    schema='gpt'
    )
    op.drop_table('meta_info')
    op.drop_table('tracking')
    op.drop_index('ix_tracking_archive_ticker_name', table_name='tracking_archive')
    op.drop_table('tracking_archive')
    op.drop_index('ix_closed_history_position_type', table_name='closed_history')
    op.drop_index('ix_closed_history_sell_status', table_name='closed_history')
    op.drop_index('ix_closed_history_strategy', table_name='closed_history')
    op.drop_table('closed_history')
    op.drop_index('ix_users_activity_status', table_name='users')
    op.drop_index('ix_users_user_id', table_name='users')
    op.drop_table('users')
    op.drop_index('ix_tracking_positions_position_status', table_name='tracking_positions')
    op.drop_index('ix_tracking_positions_strategy', table_name='tracking_positions')
    op.drop_table('tracking_positions')
    op.drop_index('ix_binance_coin_info_coin_name', table_name='binance_coin_info')
    op.drop_table('binance_coin_info')
    op.drop_index('ix_dynamic_id', table_name='dynamic')
    op.drop_table('dynamic')
    op.drop_index('ix_coin_info_id', table_name='coin_info')
    op.drop_table('coin_info')
    op.drop_index('ix_closed_positions_position_type', table_name='closed_positions')
    op.drop_index('ix_closed_positions_sell_status', table_name='closed_positions')
    op.drop_index('ix_closed_positions_strategy', table_name='closed_positions')
    op.drop_table('closed_positions')
    op.drop_table('alembic_version')
    op.drop_index('ix_active_positions_position_status', table_name='active_positions')
    op.drop_index('ix_active_positions_position_type', table_name='active_positions')
    op.drop_index('ix_active_positions_strategy', table_name='active_positions')
    op.drop_table('active_positions')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('active_positions',
    sa.Column('ticker_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('buy_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('buy_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('ticker_dynamic', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('position_status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('buy_volume', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('break_profit_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('break_sell_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('first_tracking_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('avg_tracking_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('last_tracking_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('strategy', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('last_tracking_timestamp_s', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('first_tracking_at_s', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('zero_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('position_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('real_buy_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('strategy_assumption', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('exp_buy_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('expired_tracking_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_active_positions_strategy', 'active_positions', ['strategy'], unique=False)
    op.create_index('ix_active_positions_position_type', 'active_positions', ['position_type'], unique=False)
    op.create_index('ix_active_positions_position_status', 'active_positions', ['position_status'], unique=False)
    op.create_table('alembic_version',
    sa.Column('version_num', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('version_num', name='alembic_version_pkc')
    )
    op.create_table('closed_positions',
    sa.Column('ticker_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('buy_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('sell_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('buy_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('sell_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('sell_status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('position_status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('buy_volume', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('break_profit_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('break_sell_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('strategy', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('zero_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('position_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('real_buy_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('strategy_assumption', sa.INTEGER(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_closed_positions_strategy', 'closed_positions', ['strategy'], unique=False)
    op.create_index('ix_closed_positions_sell_status', 'closed_positions', ['sell_status'], unique=False)
    op.create_index('ix_closed_positions_position_type', 'closed_positions', ['position_type'], unique=False)
    op.create_table('coin_info',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('coin_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('coin_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('ticker_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('percent_change_for_interval', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('refresh_interval', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('percent_change_1h', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('percent_change_24h', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('last_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('break_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('last_binance_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('on_binance', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('last_binance_updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_updated_at', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('added_in_table', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('price_difference', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('on_binance_futures', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='coin_info_pkey')
    )
    op.create_index('ix_coin_info_id', 'coin_info', ['id'], unique=False)
    op.create_table('dynamic',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('coin_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('coin_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('coin_dynamic', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ticker_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='dynamic_pkey')
    )
    op.create_index('ix_dynamic_id', 'dynamic', ['id'], unique=False)
    op.create_table('binance_coin_info',
    sa.Column('coin_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('precision_sign', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('default_leverage', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('has_config', sa.BOOLEAN(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_binance_coin_info_coin_name', 'binance_coin_info', ['coin_name'], unique=False)
    op.create_table('tracking_positions',
    sa.Column('ticker_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('ticker_dynamic', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('position_status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('avg_tracking_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('last_tracking_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('first_tracking_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('strategy', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('last_tracking_timestamp_s', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('first_tracking_at_s', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('strategy_assumption', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('exp_buy_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('expired_tracking_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('ticker_name', name='tracking_positions_pkey')
    )
    op.create_index('ix_tracking_positions_strategy', 'tracking_positions', ['strategy'], unique=False)
    op.create_index('ix_tracking_positions_position_status', 'tracking_positions', ['position_status'], unique=False)
    op.create_table('users',
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('api_key', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('language', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('registered_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('activity_status', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('sub_started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('sub_expired_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('user_id', name='users_pkey')
    )
    op.create_index('ix_users_user_id', 'users', ['user_id'], unique=False)
    op.create_index('ix_users_activity_status', 'users', ['activity_status'], unique=False)
    op.create_table('closed_history',
    sa.Column('ticker_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('sell_status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('position_status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('position_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('strategy', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('strategy_assumption', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('real_buy_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('buy_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('buy_volume', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('zero_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('sell_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('break_profit_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('break_sell_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('buy_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('sell_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_closed_history_strategy', 'closed_history', ['strategy'], unique=False)
    op.create_index('ix_closed_history_sell_status', 'closed_history', ['sell_status'], unique=False)
    op.create_index('ix_closed_history_position_type', 'closed_history', ['position_type'], unique=False)
    op.create_table('tracking_archive',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('coin_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ticker_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('first_tracking_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('last_tracking_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('price_difference', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('move_pattern', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('change_in_interval', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('percent_change_1h', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('percent_change_24h', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('total_interval', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('started_tracking_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('finished_tracking_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('strategy', sa.VARCHAR(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_tracking_archive_ticker_name', 'tracking_archive', ['ticker_name'], unique=False)
    op.create_table('tracking',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('coin_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ticker_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('start_tracking_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('started_tracking_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('binance_refresh_interval', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('change_in_interval', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True)
    )
    op.create_table('meta_info',
    sa.Column('coinbase_page', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('memcached_keys_length', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('memcached_keys', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('can_trade', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('last_btc_notification', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_btc_touch_border', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('can_real_trade', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('assumption_stats', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('trade_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True)
    )
    op.drop_table('users', schema='gpt')
    op.drop_table('sub_info', schema='gpt')
    op.drop_table('sub_archive', schema='gpt')
    # ### end Alembic commands ###
